// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RAG.Orchestrator.Api.Data;

#nullable disable

namespace RAG.Orchestrator.Api.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20250914075807_InitialCreateChat")]
    partial class InitialCreateChat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RAG.Orchestrator.Api.Models.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("OllamaContextJson")
                        .HasColumnType("text")
                        .HasColumnName("ollama_context");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<string>("SourcesJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("sources");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_chat_messages");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_chat_messages_session_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_chat_messages_timestamp");

                    b.HasIndex("SessionId", "Timestamp")
                        .HasDatabaseName("ix_chat_messages_session_timestamp");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("RAG.Orchestrator.Api.Models.ChatSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_chat_sessions");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("ix_chat_sessions_updated_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_chat_sessions_user_id");

                    b.ToTable("chat_sessions", (string)null);
                });

            modelBuilder.Entity("RAG.Orchestrator.Api.Models.ChatMessage", b =>
                {
                    b.HasOne("RAG.Orchestrator.Api.Models.ChatSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_chat_messages__chat_sessions_session_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("RAG.Orchestrator.Api.Models.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
