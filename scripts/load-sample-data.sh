#!/bin/bash

# RAG Suite - Load Sample Data Script
# This script loads sample documents about RAG systems into Elasticsearch

set -e

# Configuration
ES_HOST="http://localhost:9200"
ES_USER="elastic"
ES_PASS="elastic"
ES_INDEX="rag_knowledge_base"

echo "==================================================="
echo "       RAG Suite - Loading Sample Data"
echo "==================================================="

# Create index with mapping for RAG documents
echo "[INFO] Creating Elasticsearch index: $ES_INDEX"

curl -s -u $ES_USER:$ES_PASS -X PUT "$ES_HOST/$ES_INDEX" \
  -H "Content-Type: application/json" \
  -d '{
    "mappings": {
      "properties": {
        "title": {
          "type": "text",
          "analyzer": "standard"
        },
        "content": {
          "type": "text",
          "analyzer": "standard"
        },
        "category": {
          "type": "keyword"
        },
        "tags": {
          "type": "keyword"
        },
        "created_at": {
          "type": "date"
        },
        "embedding": {
          "type": "dense_vector",
          "dims": 384
        }
      }
    },
    "settings": {
      "number_of_shards": 1,
      "number_of_replicas": 0
    }
  }' | jq '.'

# Sample documents about RAG systems
echo "[INFO] Loading sample documents..."

# Document 1: RAG Introduction
curl -s -u $ES_USER:$ES_PASS -X POST "$ES_HOST/$ES_INDEX/_doc" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Wprowadzenie do RAG (Retrieval Augmented Generation)",
    "content": "RAG (Retrieval Augmented Generation) to technika ≈ÇƒÖczƒÖca wyszukiwanie informacji z generowaniem tekstu przez modele jƒôzykowe. System RAG sk≈Çada siƒô z dw√≥ch g≈Ç√≥wnych komponent√≥w: retriever (mechanizm wyszukiwania) oraz generator (model jƒôzykowy). Retriever wyszukuje relevantne dokumenty z bazy wiedzy, a nastƒôpnie generator wykorzystuje te informacje do utworzenia odpowiedzi. G≈Ç√≥wne zalety RAG to: aktualne informacje, zmniejszenie halucynacji modeli jƒôzykowych, mo≈ºliwo≈õƒá dodawania nowej wiedzy bez przekszta≈Çcania modelu.",
    "category": "technology",
    "tags": ["RAG", "AI", "NLP", "retrieval", "generation"],
    "created_at": "2025-08-24T19:00:00Z"
  }' | jq '.'

# Document 2: RAG Architecture
curl -s -u $ES_USER:$ES_PASS -X POST "$ES_HOST/$ES_INDEX/_doc" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Architektura systemu RAG",
    "content": "Typowa architektura RAG obejmuje nastƒôpujƒÖce komponenty: 1) Vector Store - baza danych wektorowych przechowujƒÖca embeddingi dokument√≥w, 2) Embedding Model - model konwertujƒÖcy teksty na reprezentacje wektorowe, 3) Retriever - mechanizm wyszukiwania podobnych dokument√≥w, 4) LLM (Large Language Model) - model generujƒÖcy odpowiedzi, 5) Orchestrator - komponent zarzƒÖdzajƒÖcy przep≈Çywem danych. Proces dzia≈Ça nastƒôpujƒÖco: zapytanie u≈ºytkownika jest konwertowane na embedding, wyszukiwane sƒÖ podobne dokumenty, kontekst jest przekazywany do LLM wraz z zapytaniem, model generuje odpowied≈∫ bazujƒÖc na dostarczonym kontek≈õcie.",
    "category": "architecture",
    "tags": ["RAG", "architecture", "vector-store", "embedding", "LLM"],
    "created_at": "2025-08-24T19:00:00Z"
  }' | jq '.'

# Document 3: Elasticsearch in RAG
curl -s -u $ES_USER:$ES_PASS -X POST "$ES_HOST/$ES_INDEX/_doc" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Elasticsearch jako Vector Store w RAG",
    "content": "Elasticsearch mo≈ºe s≈Çu≈ºyƒá jako vector store w systemach RAG dziƒôki wsparciu dla dense_vector field type. Umo≈ºliwia to przechowywanie embedding√≥w dokument√≥w i wykonywanie wyszukiwania semantycznego. Kluczowe funkcje: kNN (k-nearest neighbors) search, hybrid search ≈ÇƒÖczƒÖcy wyszukiwanie tekstowe z wektorowym, skalowalno≈õƒá i wydajno≈õƒá, integracja z narzƒôdziami analitycznymi. Elasticsearch oferuje te≈º funkcje takie jak filtering, agregacje i real-time indexing, co czyni go idealnym wyborem dla produkcyjnych system√≥w RAG.",
    "category": "technology",
    "tags": ["Elasticsearch", "vector-store", "kNN", "search", "RAG"],
    "created_at": "2025-08-24T19:00:00Z"
  }' | jq '.'

# Document 4: LLM Models in RAG
curl -s -u $ES_USER:$ES_PASS -X POST "$ES_HOST/$ES_INDEX/_doc" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Modele jƒôzykowe w systemach RAG",
    "content": "W systemach RAG mo≈ºna u≈ºywaƒá r√≥≈ºnych modeli jƒôzykowych: GPT-4, Claude, Llama, Mistral, czy mniejsze modele jak GPT-2 dla test√≥w. Wyb√≥r modelu zale≈ºy od wymaga≈Ñ dotyczƒÖcych jako≈õci odpowiedzi, koszt√≥w i zasob√≥w obliczeniowych. Wiƒôksze modele jak GPT-4 generujƒÖ lepsze odpowiedzi ale wymagajƒÖ wiƒôcej zasob√≥w. Mniejsze modele jak GPT-2 sƒÖ szybsze i ta≈Ñsze, ale mogƒÖ generowaƒá kr√≥tsze lub mniej dok≈Çadne odpowiedzi. Kluczowe parametry: max_tokens (d≈Çugo≈õƒá odpowiedzi), temperature (kreatywno≈õƒá), top_p (r√≥≈ºnorodno≈õƒá wynik√≥w).",
    "category": "technology",
    "tags": ["LLM", "GPT", "Claude", "Llama", "language-models", "RAG"],
    "created_at": "2025-08-24T19:00:00Z"
  }' | jq '.'

# Document 5: RAG Best Practices
curl -s -u $ES_USER:$ES_PASS -X POST "$ES_HOST/$ES_INDEX/_doc" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Najlepsze praktyki dla system√≥w RAG",
    "content": "Aby zbudowaƒá skuteczny system RAG, warto stosowaƒá nastƒôpujƒÖce praktyki: 1) Jako≈õƒá danych - czyste, strukturyzowane dokumenty w bazie wiedzy, 2) Chunking - podzia≈Ç d≈Çugich dokument√≥w na mniejsze fragmenty, 3) Embedding quality - u≈ºycie odpowiednich modeli embedding√≥w, 4) Prompt engineering - tworzenie skutecznych prompt√≥w dla LLM, 5) Evaluation - regularne testowanie jako≈õci odpowiedzi, 6) Monitoring - ≈õledzenie wydajno≈õci i dok≈Çadno≈õci systemu, 7) User feedback - zbieranie opinii u≈ºytkownik√≥w do ulepszania systemu.",
    "category": "best-practices",
    "tags": ["RAG", "best-practices", "chunking", "evaluation", "monitoring"],
    "created_at": "2025-08-24T19:00:00Z"
  }' | jq '.'

# Wait for indexing
echo "[INFO] Waiting for documents to be indexed..."
sleep 2

# Verify data loading
echo "[INFO] Verifying loaded data..."
DOC_COUNT=$(curl -s -u $ES_USER:$ES_PASS "$ES_HOST/$ES_INDEX/_count" | jq '.count')
echo "[SUCCESS] Loaded $DOC_COUNT documents into $ES_INDEX"

# Show sample search
echo "[INFO] Testing search functionality..."
curl -s -u $ES_USER:$ES_PASS -X POST "$ES_HOST/$ES_INDEX/_search" \
  -H "Content-Type: application/json" \
  -d '{
    "query": {
      "multi_match": {
        "query": "RAG system",
        "fields": ["title^2", "content"]
      }
    },
    "size": 3
  }' | jq '.hits.hits[] | {title: ._source.title, score: ._score}'

echo "==================================================="
echo "        Sample Data Loading Complete!"
echo "==================================================="
echo ""
echo "üìä Loaded sample documents about:"
echo "  ‚Ä¢ RAG Introduction and concepts"
echo "  ‚Ä¢ RAG Architecture and components"  
echo "  ‚Ä¢ Elasticsearch as Vector Store"
echo "  ‚Ä¢ LLM Models in RAG systems"
echo "  ‚Ä¢ RAG Best Practices"
echo ""
echo "üîç You can now test the chat with questions like:"
echo "  ‚Ä¢ 'What is RAG?'"
echo "  ‚Ä¢ 'How does RAG architecture work?'"
echo "  ‚Ä¢ 'What are RAG best practices?'"
echo "  ‚Ä¢ 'How to use Elasticsearch in RAG?'"
echo ""
