KontekstPracujemy w repo zawierającym projekt RAG.Orchestrator.Api (.NET 8). Chcę wynieść kontrakty wyszukiwania do nowej biblioteki (np. RAG.Abstractions), tak aby:• ISearchService i wszystkie DTO z pliku Features/Search/SearchModels.cs trafiły do nowego projektu,• implementacja SearchService (Elasticsearch) została w RAG.Orchestrator.Api,• wszystkie odwołania w kodzie używały nowej przestrzeni nazw (np. RAG.Abstractions.Search),• RAG.Orchestrator.Api referencjonował nowy projekt.Zasady pracy• Po każdym kroku zatrzymaj się i zapytaj: „Kontynuować do kolejnego kroku? (y/n)”.• Wykonuj minimalne, pewne zmiany. Po większych krokach uruchamiaj kompilację.• Pokaż zmiany jako diff (lub wskaż dokładne edycje plików).• Jeśli pojawią się błędy — napraw je przed przejściem dalej.KROK 0 — Inwentaryzacja (tylko analiza, bez zmian)1. Wypisz wszystkie miejsca, które używają ISearchService oraz using RAG.Orchestrator.Api.Features.Search;.Użyj wyszukiwania w workspace i podaj listę plików + linie.(W moim podprojekcie typowo pojawiają się m.in.:Features/Search/SearchService.cs – interfejs + implementacja,Features/Search/SearchModels.cs – rekordy SearchRequest, SearchResponse, SearchResult, DocumentDetail, itd.,Features/Chat/ChatService.cs, Features/Chat/UserChatService.cs, Features/Search/SearchEndpoints.cs,Extensions/ServiceCollectionExtensions.cs, Program.cs, i inne, które mają using ...Features.Search;)2. Zidentyfikuj dokładny fragment deklaracji interfejsu:3. public interface ISearchService4. {5.     Task<SearchResponse> SearchAsync(SearchRequest request, CancellationToken cancellationToken = default);6.     Task<SearchResponse> SearchHybridAsync(SearchRequest request, CancellationToken cancellationToken = default);7.     Task<DocumentDetail> GetDocumentByIdAsync(string documentId, CancellationToken cancellationToken = default);8. }STOP. Pokaż listę plików i potwierdź, że znalazłeś interfejs.Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 1 — Utworzenie nowej biblioteki kontraktów1. W katalogu roboczym obok RAG.Orchestrator.Api utwórz projekt:2. dotnet new classlib -n RAG.Abstractions -f net8.03. W RAG.Abstractions/RAG.Abstractions.csproj włącz Nullable i ImplicitUsings (jeśli nie są):4. <PropertyGroup>5.   <TargetFramework>net8.0</TargetFramework>6.   <Nullable>enable</Nullable>7.   <ImplicitUsings>enable</ImplicitUsings>8. </PropertyGroup>9. Dodaj folder Search/ w projekcie RAG.Abstractions.STOP. Pokaż strukturę plików po dodaniu projektu.Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 2 — Przeniesienie DTO (modele wyszukiwania) do RAG.Abstractions1. Skopiuj plik RAG.Orchestrator.Api/Features/Search/SearchModels.cs doRAG.Abstractions/Search/SearchModels.cs.2. Zmień przestrzeń nazw z:3. namespace RAG.Orchestrator.Api.Features.Search;na:namespace RAG.Abstractions.Search;4. Nie zmieniaj podpisów typów publicznych — zachowaj kontrakt 1:1.STOP. Pokaż diff nowego pliku z nową przestrzenią nazw.Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 3 — Wyodrębnienie ISearchService do RAG.Abstractions1. W projekcie RAG.Abstractions utwórz plikSearch/ISearchService.cs o treści (użyj typów z RAG.Abstractions.Search):2. using System.Threading;3. using System.Threading.Tasks;4. 5. namespace RAG.Abstractions.Search;6. 7. public interface ISearchService8. {9.     Task<SearchResponse> SearchAsync(SearchRequest request, CancellationToken cancellationToken = default);10.     Task<SearchResponse> SearchHybridAsync(SearchRequest request, CancellationToken cancellationToken = default);11.     Task<DocumentDetail> GetDocumentByIdAsync(string documentId, CancellationToken cancellationToken = default);12. }13. W pliku RAG.Orchestrator.Api/Features/Search/SearchService.cs usuń deklarację public interface ISearchService i pozostaw tylko klasę implementującą SearchService : ISearchService.Dodaj using RAG.Abstractions.Search; tam, gdzie potrzeba.STOP. Pokaż diff dla ISearchService.cs (nowy plik) oraz zmiany w SearchService.cs (usunięcie interfejsu i nowe using).Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 4 — Zmiana using w całym rozwiązaniu1. W wszystkich miejscach, gdzie jest:2. using RAG.Orchestrator.Api.Features.Search;zamień na:using RAG.Abstractions.Search;Wyjątek: pliki, które muszą znać implementację (np. sama implementacja SearchService) mogą nadal mieć dodatkowe using RAG.Orchestrator.Api.Features.Search; dla typów wewnętrznych — ale modele/kontrakty powinny iść z RAG.Abstractions.Search.3. Upewnij się, że pliki takie jak:o Features/Chat/ChatService.cso Features/Chat/UserChatService.cso Features/Search/SearchEndpoints.cso Extensions/ServiceCollectionExtensions.cso Program.cso oraz inne wykryte w Kroku 0teraz kompilują się z nową przestrzenią nazw.STOP. Wypisz zaktualizowane pliki i pokaż przykładowe diffy importów.Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 5 — Referencja projektu i kompilacja1. Dodaj referencję projektu:2. dotnet add RAG.Orchestrator.Api/RAG.Orchestrator.Api.csproj reference RAG.Abstractions/RAG.Abstractions.csproj(Jeśli mamy .sln, możesz też dodać oba projekty do solution i utrzymać porządek).3. Uruchom kompilację:4. dotnet build RAG.Abstractions/RAG.Abstractions.csproj5. dotnet build RAG.Orchestrator.Api/RAG.Orchestrator.Api.csproj6. Jeśli pojawią się błędy przestrzeni nazw/usingów — popraw i powtórz build.STOP. Pokaż wynik buildów i ewentualne poprawki.Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 6 — DI i kontrola zachowania aplikacji1. W RAG.Orchestrator.Api/Extensions/ServiceCollectionExtensions.cs pozostaw rejestrację:2. services.AddHttpClient<ISearchService, SearchService>(...);3. services.AddScoped<ISearchService, SearchService>();…ale upewnij się, że ISearchService jest z RAG.Abstractions.Search, a SearchService z RAG.Orchestrator.Api.Features.Search.4. Szybka weryfikacja uruchomienia (jeśli masz środowisko):5. dotnet run --project RAG.Orchestrator.Api/RAG.Orchestrator.Api.csprojSTOP. Pokaż finalny fragment DI i wynik uruchomienia (lub kompilacji).Pytanie: Kontynuować do kolejnego kroku? (y/n)KROK 7 — Porządki końcowe1. Sprawdź, że nie ma już definicji interfejsu ISearchService w RAG.Orchestrator.Api:o przeszukaj workspace po interface ISearchService.2. Sformatuj rozwiązanie:3. dotnet format4. Przygotuj commit:5. git add .6. git commit -m "Refactor: move ISearchService and search DTOs to RAG.Abstractions"STOP. Pokaż krótkie podsumowanie co się zmieniło (projekty, pliki, przestrzenie nazw).Koniec.Pamiętaj: Po każdym kroku zadaj pytanie o kontynuację i czekaj na moją zgodę.