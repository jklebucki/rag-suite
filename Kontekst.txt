KontekstPracujemy w repo zawieraj?cym projekt RAG.Orchestrator.Api (.NET 8). Chc? wynie?? kontrakty wyszukiwania do nowej biblioteki (np. RAG.Abstractions), tak aby:* ISearchService i wszystkie DTO z pliku Features/Search/SearchModels.cs trafi?y do nowego projektu,* implementacja SearchService (Elasticsearch) zosta?a w RAG.Orchestrator.Api,* wszystkie odwo?ania w kodzie u?ywa?y nowej przestrzeni nazw (np. RAG.Abstractions.Search),* RAG.Orchestrator.Api referencjonowa? nowy projekt.Zasady pracy* Po ka?dym kroku zatrzymaj si? i zapytaj: „Kontynuowa? do kolejnego kroku? (y/n)”.* Wykonuj minimalne, pewne zmiany. Po wi?kszych krokach uruchamiaj kompilacj?.* Poka? zmiany jako diff (lub wska? dok?adne edycje plików).* Je?li pojawi? si? b??dy — napraw je przed przej?ciem dalej.KROK 0 — Inwentaryzacja (tylko analiza, bez zmian)1. Wypisz wszystkie miejsca, które u?ywaj? ISearchService oraz using RAG.Orchestrator.Api.Features.Search;.U?yj wyszukiwania w workspace i podaj list? plików + linie.(W moim podprojekcie typowo pojawiaj? si? m.in.:Features/Search/SearchService.cs – interfejs + implementacja,Features/Search/SearchModels.cs – rekordy SearchRequest, SearchResponse, SearchResult, DocumentDetail, itd.,Features/Chat/ChatService.cs, Features/Chat/UserChatService.cs, Features/Search/SearchEndpoints.cs,Extensions/ServiceCollectionExtensions.cs, Program.cs, i inne, które maj? using ...Features.Search;)2. Zidentyfikuj dok?adny fragment deklaracji interfejsu:3. public interface ISearchService4. {5.     Task<SearchResponse> SearchAsync(SearchRequest request, CancellationToken cancellationToken = default);6.     Task<SearchResponse> SearchHybridAsync(SearchRequest request, CancellationToken cancellationToken = default);7.     Task<DocumentDetail> GetDocumentByIdAsync(string documentId, CancellationToken cancellationToken = default);8. }STOP. Poka? list? plików i potwierd?, ?e znalaz?e? interfejs.Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 1 — Utworzenie nowej biblioteki kontraktów1. W katalogu roboczym obok RAG.Orchestrator.Api utwórz projekt:2. dotnet new classlib -n RAG.Abstractions -f net8.03. W RAG.Abstractions/RAG.Abstractions.csproj w??cz Nullable i ImplicitUsings (je?li nie s?):4. <PropertyGroup>5.   <TargetFramework>net8.0</TargetFramework>6.   <Nullable>enable</Nullable>7.   <ImplicitUsings>enable</ImplicitUsings>8. </PropertyGroup>9. Dodaj folder Search/ w projekcie RAG.Abstractions.STOP. Poka? struktur? plików po dodaniu projektu.Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 2 — Przeniesienie DTO (modele wyszukiwania) do RAG.Abstractions1. Skopiuj plik RAG.Orchestrator.Api/Features/Search/SearchModels.cs doRAG.Abstractions/Search/SearchModels.cs.2. Zmie? przestrze? nazw z:3. namespace RAG.Orchestrator.Api.Features.Search;na:namespace RAG.Abstractions.Search;4. Nie zmieniaj podpisów typów publicznych — zachowaj kontrakt 1:1.STOP. Poka? diff nowego pliku z now? przestrzeni? nazw.Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 3 — Wyodr?bnienie ISearchService do RAG.Abstractions1. W projekcie RAG.Abstractions utwórz plikSearch/ISearchService.cs o tre?ci (u?yj typów z RAG.Abstractions.Search):2. using System.Threading;3. using System.Threading.Tasks;4. 5. namespace RAG.Abstractions.Search;6. 7. public interface ISearchService8. {9.     Task<SearchResponse> SearchAsync(SearchRequest request, CancellationToken cancellationToken = default);10.     Task<SearchResponse> SearchHybridAsync(SearchRequest request, CancellationToken cancellationToken = default);11.     Task<DocumentDetail> GetDocumentByIdAsync(string documentId, CancellationToken cancellationToken = default);12. }13. W pliku RAG.Orchestrator.Api/Features/Search/SearchService.cs usu? deklaracj? public interface ISearchService i pozostaw tylko klas? implementuj?c? SearchService : ISearchService.Dodaj using RAG.Abstractions.Search; tam, gdzie potrzeba.STOP. Poka? diff dla ISearchService.cs (nowy plik) oraz zmiany w SearchService.cs (usuni?cie interfejsu i nowe using).Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 4 — Zmiana using w ca?ym rozwi?zaniu1. W wszystkich miejscach, gdzie jest:2. using RAG.Orchestrator.Api.Features.Search;zamie? na:using RAG.Abstractions.Search;Wyj?tek: pliki, które musz? zna? implementacj? (np. sama implementacja SearchService) mog? nadal mie? dodatkowe using RAG.Orchestrator.Api.Features.Search; dla typów wewn?trznych — ale modele/kontrakty powinny i?? z RAG.Abstractions.Search.3. Upewnij si?, ?e pliki takie jak:o Features/Chat/ChatService.cso Features/Chat/UserChatService.cso Features/Search/SearchEndpoints.cso Extensions/ServiceCollectionExtensions.cso Program.cso oraz inne wykryte w Kroku 0teraz kompiluj? si? z now? przestrzeni? nazw.STOP. Wypisz zaktualizowane pliki i poka? przyk?adowe diffy importów.Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 5 — Referencja projektu i kompilacja1. Dodaj referencj? projektu:2. dotnet add RAG.Orchestrator.Api/RAG.Orchestrator.Api.csproj reference RAG.Abstractions/RAG.Abstractions.csproj(Je?li mamy .sln, mo?esz te? doda? oba projekty do solution i utrzyma? porz?dek).3. Uruchom kompilacj?:4. dotnet build RAG.Abstractions/RAG.Abstractions.csproj5. dotnet build RAG.Orchestrator.Api/RAG.Orchestrator.Api.csproj6. Je?li pojawi? si? b??dy przestrzeni nazw/usingów — popraw i powtórz build.STOP. Poka? wynik buildów i ewentualne poprawki.Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 6 — DI i kontrola zachowania aplikacji1. W RAG.Orchestrator.Api/Extensions/ServiceCollectionExtensions.cs pozostaw rejestracj?:2. services.AddHttpClient<ISearchService, SearchService>(...);3. services.AddScoped<ISearchService, SearchService>();…ale upewnij si?, ?e ISearchService jest z RAG.Abstractions.Search, a SearchService z RAG.Orchestrator.Api.Features.Search.4. Szybka weryfikacja uruchomienia (je?li masz ?rodowisko):5. dotnet run --project RAG.Orchestrator.Api/RAG.Orchestrator.Api.csprojSTOP. Poka? finalny fragment DI i wynik uruchomienia (lub kompilacji).Pytanie: Kontynuowa? do kolejnego kroku? (y/n)KROK 7 — Porz?dki ko?cowe1. Sprawd?, ?e nie ma ju? definicji interfejsu ISearchService w RAG.Orchestrator.Api:o przeszukaj workspace po interface ISearchService.2. Sformatuj rozwi?zanie:3. dotnet format4. Przygotuj commit:5. git add .6. git commit -m "Refactor: move ISearchService and search DTOs to RAG.Abstractions"STOP. Poka? krótkie podsumowanie co si? zmieni?o (projekty, pliki, przestrzenie nazw).Koniec.Pami?taj: Po ka?dym kroku zadaj pytanie o kontynuacj? i czekaj na moj? zgod?.